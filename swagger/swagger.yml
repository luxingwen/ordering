swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /category/:
    get:
      tags:
      - category
      description: get Category
      operationId: CategoryController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Category'
        "403": {}
    post:
      tags:
      - category
      description: create Category
      operationId: CategoryController.Post
      parameters:
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "201":
          description: '{int} models.Category'
        "403":
          description: body is empty
  /category/{id}:
    get:
      tags:
      - category
      description: get Category by id
      operationId: CategoryController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is empty
    put:
      tags:
      - category
      description: update the Category
      operationId: CategoryController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Category content
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Category'
        "403":
          description: :id is not int
    delete:
      tags:
      - category
      description: delete the Category
      operationId: CategoryController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /menu/:
    get:
      tags:
      - menu
      description: get Menu
      operationId: MenuController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Menu'
        "403": {}
    post:
      tags:
      - menu
      description: create Menu
      operationId: MenuController.Post
      parameters:
      - in: body
        name: body
        description: body for Menu content
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      responses:
        "201":
          description: '{int} models.Menu'
        "403":
          description: body is empty
  /menu/{id}:
    get:
      tags:
      - menu
      description: get Menu by id
      operationId: MenuController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Menu'
        "403":
          description: :id is empty
    put:
      tags:
      - menu
      description: update the Menu
      operationId: MenuController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Menu content
        required: true
        schema:
          $ref: '#/definitions/models.Menu'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Menu'
        "403":
          description: :id is not int
    delete:
      tags:
      - menu
      description: delete the Menu
      operationId: MenuController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /order/:
    get:
      tags:
      - order
      description: get Order
      operationId: OrderController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Order'
        "403": {}
    post:
      tags:
      - order
      description: create Order
      operationId: OrderController.Post
      parameters:
      - in: body
        name: body
        description: body for Order content
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      responses:
        "201":
          description: '{int} models.Order'
        "403":
          description: body is empty
  /order/{id}:
    get:
      tags:
      - order
      description: get Order by id
      operationId: OrderController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Order'
        "403":
          description: :id is empty
    put:
      tags:
      - order
      description: update the Order
      operationId: OrderController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Order content
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Order'
        "403":
          description: :id is not int
    delete:
      tags:
      - order
      description: delete the Order
      operationId: OrderController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user/:
    get:
      tags:
      - user
      description: get User
      operationId: UserController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403": {}
    post:
      tags:
      - user
      description: create User
      operationId: UserController.Post
      parameters:
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "201":
          description: '{int} models.User'
        "403":
          description: body is empty
  /user/{id}:
    get:
      tags:
      - user
      description: get User by id
      operationId: UserController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is empty
    put:
      tags:
      - user
      description: update the User
      operationId: UserController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for User content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :id is not int
    delete:
      tags:
      - user
      description: delete the User
      operationId: UserController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  .Time:
    type: object
  models.Category:
    title: Category
    type: object
    properties:
      created:
        $ref: '#/definitions/time.Time'
      fatherId:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      name:
        type: string
      updated:
        $ref: '#/definitions/time.Time'
  models.Menu:
    title: Menu
    type: object
    properties:
      created:
        $ref: '#/definitions/time.Time'
      id:
        type: integer
        format: int64
      name:
        type: string
      number:
        type: integer
        format: int64
      pic:
        type: string
      price:
        type: number
        format: double
      types:
        type: integer
        format: int64
      updated:
        $ref: '#/definitions/time.Time'
  models.Order:
    title: Order
    type: object
    properties:
      TableNum:
        type: string
      amount:
        type: number
        format: double
      created:
        $ref: '#/definitions/time.Time'
      discount:
        type: number
        format: double
      id:
        type: integer
        format: int64
      isPay:
        type: boolean
      menuDetail:
        type: string
      orderId:
        type: string
      people:
        type: integer
        format: int64
      remarks:
        type: string
      updated:
        $ref: '#/definitions/time.Time'
  models.User:
    title: User
    type: object
    properties:
      address:
        type: string
      authData:
        type: string
      city:
        type: string
      created:
        $ref: '#/definitions/time.Time'
      id:
        type: integer
        format: int64
      nickName:
        type: string
      password:
        type: string
      phone:
        type: string
      pic:
        type: string
      sex:
        type: integer
        format: int64
      updated:
        $ref: '#/definitions/time.Time'
      username:
        type: string
tags:
- name: user
  description: |2
     UserController oprations for User
- name: order
  description: |2
     OrderController oprations for Order
- name: menu
  description: |2
     MenuController oprations for Menu
- name: category
  description: |2
     CategoryController oprations for Category
